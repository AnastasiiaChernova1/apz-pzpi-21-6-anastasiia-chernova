Мета роботи 

Мета даної лабораторної роботи є розробка клієнтської frond-end частини проекту за темою: «Програмна система для управління кінотеатрами».

1 ДІАГРАМА ПРЕЦЕДЕНТІВ

Для демонстрації дій користувача в веб-застосунку, було створено діаграму прецедентів (див. рис. 1.1). Система має трьох типів користувачів: неавторизованого користувача, авторизованого користувача та адміністратора. Діаграма показує доступний функціонал для користувачів системи в клієнтському застосунку. 

2 СТРУКТУРА ПРОЕКТУ

Реалізація клієнтської частини системи ґрунтується на використанні фреймворку React та мови JavaScript. Проект має чітко організовану структуру директорій та файлів, що дозволяє ефективно розробляти, тестувати та підтримувати додаток. 
Нижче наведено опис основних директорій та файлів проекту (див.рис.2.1).
Загальна структура проекту client/:
- node_modules/ - директорія з залежностями проекту, встановленими через npm;
- public/- містить статичні файли, такі як index.html, які є точкою входу для додатка;
- src/ - основна директорія, де розташований весь вихідний код додатка.
Деталізація директорії src/:
- components/ - компоненти, які використовуються в додатку. Вони розділені на піддиректорії для кращої організації;
  	- models/ - компоненти для створення моделей для адмін панелі:
-	CreateMenu.jsx - компонент для створення меню;
-	CreateMovie.jsx - компонент для створення фільму;
-	CreateSchedule.jsx - компонент для створення розкладу.
- AppRouter.jsx - компонент для маршрутизації додатка;
- NavBar.jsx - компонент для навігаційної панелі;
- http/ - файли для роботи з API. Тут розташовані функції для здійснення HTTP-запитів до бекенду:
	basketAPI.js - функції для роботи з кошиком;
	feedbackAPI.js - функції для роботи з відгуками;
	hallAPI.js - функції для роботи з залами;
	menuAPI.js - функції для роботи з меню;
	movieAPI.js - функції для роботи з фільмами;
	scheduleAPI.js - функції для роботи з розкладами;
	seatsAPI.js - функції для роботи з місцями;
	ticketAPI.js - функції для роботи з квитками;
	userAPI.js - функції для роботи з користувачами.
- pages/ - компоненти сторінок додатка;
- routes/ - файли для налаштування маршрутизації у додатку;
- style/ - файли стилів для оформлення додатка;
  	- utils/ - допоміжні файли та функції;
   	- consts.jsx - константи, які використовуються у додатку;
- App.js - головний компонент додатка;
- i18n.js - файли для багатомовної підтримки у додатку;
- index.js - точка входу в додаток.
Реалізація здійснюється з використанням компонентів, що дозволяє розбити додаток на малі, керовані та багаторазово використовувані частини. Це покращує підтримуваність коду та його розширюваність.
Використовується бібліотека React Router для налаштування маршрутизації між різними сторінками додатка. Маршрути визначаються у файлах в директорії routes, а самі сторінки знаходяться у pages.
Для підтримки декількох мов використовується бібліотека i18next, яка забезпечує простий спосіб додавання та управління перекладами.
Для взаємодії з бекендом використовуються функції, що здійснюють HTTP-запити до API. Це дозволяє отримувати та надсилати дані між клієнтом та сервером.
Ця структура проекту забезпечує чистоту та організованість коду, що полегшує тестування та подальшу підтримку додатка.
Для збірки та розробки додатка використовується інструмент Vite, який налаштовується через файл vite.config.js. Залежності проекту встановлюються через npm та зберігаються у директорії node_modules.

Для структуризації та розподілу функціональності клієнтської частини системи було використано підхід на основі пакетів (модулів). Кожен пакет відповідає за певну функціональну область та містить відповідні компоненти, сервіси, моделі даних тощо. Такий підхід дозволяє логічно розподілити відповідальність та сприяє підтримці і розширенню системи. Для візуалізації структури пакетів та їх взаємозв’язків була побудована діаграма пакетів (див.рис.2.2).

На діаграмі представлені наступні пакети:
src - основний пакет, який містить всі інші пакети;
config - пакет, який містить конфігураційні файли веб-додатку;
cinema - пакет, який містить компоненти, що відповідають за управління станом веб-додатку;
components - пакет, який містить всі компоненти веб-додатку;
utils - пакет, який містить всі перечислення веб-додатку;
pages - пакет, який містить всі компоненти, що відповідають за реалізацію певних функцій веб-додатку;
http - пакет, який містить всі запити до сервісу;
modals - пакет, який містить всі сервіси веб-додатку.

3 ПОВЕДІНКА СИСТЕМИ

Для відстеження роботи програмної системи для управління кінотеатрами розроблено UML-діаграму діяльності (див. рис. 3.1). Діаграма описує процес управління системою кінотеатрів для авторизованого користувача. 
Діаграма починається з того, що користувач входить у систему, а потім переходить на головну сторінку з фільмами.
Після входу в систему користувач має можливість обрати одну з наступних сторінок: сторінку з фільмами, сторінку з розкладом показів, сторінку відгуків, сторінку з рекомендаціями або сторінку з квитками (корзину). 
На сторінці з фільмами користувач може переглядати всі фільми, обрати конкретний фільм, переглядати детальну інформацію про обраний фільм, обрати показ цього фільму, обрати вільні місця на показ фільму, забронювати місце та купити квиток.
На сторінці з розкладом показів користувач може переглядати наявні розклади. На сторінці відгуків користувач має можливість написати відгук і надіслати його на пошту компанії.
Сторінка з рекомендаціями дозволяє користувачу переглядати персоналізовані рекомендації. На сторінці з квитками (корзина) може переглядати куплені квитки.
Ця діаграма допомагає зрозуміти, як користувач може взаємодіяти з різними компонентами системи кінотеатру, починаючи від входу в систему до перегляду та купівлі квитків, що забезпечує чітке уявлення про користувацький досвід у системі. 
Вона є цінним інструментом для розробників і дизайнерів, що дозволяє ефективно планувати і вдосконалювати функціонал системи, а також забезпечує зручність і логічність навігації для кінцевих користувачів. Це сприяє підвищенню задоволеності користувачів і збільшенню ефективності роботи системи в цілому.

ВИСНОВКИ

У даній лабораторній роботі було розроблено клієнтську частину веб-додатку для управління товарообігом мереж супермаркетів. 
Було створено діаграму прецедентів, яка демонструє функціонал системи для різних типів користувачів. Також розроблено UML діаграми компонентів, пакетів та діяльності, що дозволяють зрозуміти структуру та поведінку системи. 
Front-End реалізовано з використанням фреймворку React, мови програмування JavaScript. Застосовано модульний підхід та розподіл на пакети за функціональними областями. 
Запропонований підхід дозволяє створити гнучку та масштабовану архітектуру клієнтської частини додатку. Розроблена система надає необхідний функціонал для ефективного управління товарними потоками в мережах супермаркетів.

5 ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

Посилання на архів з кодом: 
Посилання на відео: https://www.youtube.com/watch?v=LFr2PMbUDBM


