1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Для демонстрації дій користувача в додатку, було створено діаграму прецедентів (див. рис. 1.1). Діаграма презентує функціонал доступний користувачам при використанні застосунка. Програмна система передбачає 3 категорії користувачів: неавторизований авторизований користувач, адміністратор, головний адміністратор.
Користувач починає з перегляду меню, де він може ознайомитися з доступними фільмами та іншими послугами. Авторизація дозволяє користувачу увійти до системи, щоб здійснювати додаткові дії. Після авторизації користувач може переглянути всі фільми, обрати конкретний фільм для детальнішого перегляду або переглянути конкретний зал, щоб побачити доступні місця. Користувач може забронювати місце в залі або безпосередньо придбати квиток. Перегляд квитка дозволяє користувачу перевірити деталі придбаного квитка. Якщо користувач забронював місце, він може переглянути заброньовані місця та додати квиток до корзини. Користувач може переглянути індивідуальні рекомендації фільмів та надіслати відгук на фільм на пошту CineMagic.
Адміністратор може створювати нові зали та оновлювати інформацію про існуючі зали. При необхідності може видаляти зали з системи. Адміністратор відповідає за створення та оновлення квитків, видалення квитків та управління бронюванням місць. Має можливість переглядати всі квитки, додавати їх до корзини та переглядати всі заброньовані місця, переглядати та редагувати інформацію про працівників кінотеатру, створювати нових працівників та видаляти існуючих, оновлювати меню, видаляти позиції з меню та оновлювати інформацію про фільми, створювати нові фільми або видаляти їх з системи.
Ця діаграма допомагає зрозуміти структуру та функціональні можливості системи управління кінотеатром CineMagic, відображаючи дії, які можуть виконувати користувачі, адміністратори та головний адміністратор.

Розглянемо діаграму діяльності (див.рис.1.2), що зображує послідовність дій при процесі вибору фільму, перегляду його розкладу, бронювання місця та створення квитка в системі управління кінотеатрами.
Діаграма починається з точки входу, що символізує старт процесу. Користувач обирає фільм для перегляду. Якщо обраний фільм не підходить, можна обрати інший фільм. Користувач переглядає детальну інформацію про обраний фільм. Дивиться доступні розклади для обраного фільму. Обирає конкретний показ для перегляду фільму. Якщо на цей фільм є інші покази, можна обрати інший показ, якщо обраний не підходить. Користувач переглядає доступні місця в залі для обраного показу. Якщо є вільні місця -можна забронювати місце. Якщо немає вільних місць - повертається до вибору іншого показу. Користувач бронює місце в залі для обраного показу. Система створює квиток для заброньованого місця та обраного показу. Процес завершується в точці виходу, що символізує завершення всіх дій.
Ця діаграма діяльності відображає основні кроки користувача від вибору фільму до створення квитка. 

2 ПРОЄКТУВАННЯ МОДЕЛІ ДАНИХ

База даних для програмної системи управління кінотеатрами складається з 11 таблиць: меню, працівники, фільми, відгуки, розклади, квитки, корзини, місця, користувачі, зали. Для створення бази даних було розроблено ER-модель даних (див.рис.2.1).
 
Опис сутностей: 
  -	FoodMenuItems - інформація про страви з меню: id, назва, опис, ціна, URL зображення страви.
  -	Employees - інформація про працівників: id, роль, дата прийому на роботу, фото, дати створення та оновлення записів.
  -	Movies - інформація про фільми: id, назва, опис, тривалість, жанр, рейтинг, URL постера та трейлера, дати створення та оновлення записів.
  -	Reviews - відгуки про фільми: id, рейтинг, коментар, дати створення та оновлення.
  -	Schedules - розклад сеансів: id, час початку та закінчення, дата, дати створення та оновлення.
  -	Tickets - придбані квитки: id, дати створення, оновлення та придбання, ціна.
  -	Baskets і BasketTickets - непорожні кошики придбаних квитків та їх деталі.
  -	Seats - інформація про місця в залі: id, номери ряду та місця, дати створення та оновлення.
  -	Users - інформація про користувачів: id, електронна адреса, пароль, роль, дати створення та оновлення.
  -	Halls - інформація про кінозали: id, назва, загальна кількість місць, дати створення та оновлення.
Опис зв’язків:
  -	Один фільм може мати багато розкладів.
  -	Один квиток одне місце.
  -	Один розклад може бути пов'язаний з багатьма квитками.
  -	Один зал може мати багато місць.
  -	Один користувач може мати багато квитків в кошику.
  -	Один кошик може містити багато квитків.
  -	Один користувач може залишати багато відгуків.

3 АРХІТЕКТУРНІ РІШЕННЯ ТА ВИКОРИСТАНІ ТЕХНОЛОГІЇ

Back-end частина реалізована на мові програмування JavaScript за допомогою фреймворку NodeJS. Використовується PostgreSQL як система управління базами даних (СУБД). 
NodeJS дозволяє створювати ефективний та масштабований back-end з використанням JavaScript. Він має вбудовану підтримку для роботи з базами даних, в тому числі з PostgreSQL. 
Для збереження даних використовуються міграції та ORM TypeORM. Це спрощує роботу з базою даних та дозволяє описувати моделі даних за допомогою класів JavaScript. Також реалізовано автентифікацію за допомогою JSON Web Token. 
Проект представлений п’ятьма функціональними частинами. Компоненти та взаємодія між ними представлені на діаграмі розгортання (див. рис. 3.1). Функціональні частини програмної системи: 
-	серверна частина; 
-	клієнтська частина; 
- мобільний застосунок; 
-	база даних (PostgreSQL); 
-	смарт-пристрій. 
В якості сервера бази даних використовується PostgreSQL - популярна реляційна СУБД з відкритим вихідним кодом. Вона забезпечує надійне зберігання та ефективну обробку даних. 
Основний обмін даними в системі відбувається через серверну частину застосунку. Саме серверна частина відповідає за бізнес-логіку та доступ до даних. 
Взаємодія серверної частини з іншими компонентами системи відбувається наступним чином: 
⎯ з клієнтською частиною - через REST API за протоколом HTTPS; 
⎯ з мобільними додатками - через HTTPS; 
⎯ з IoT пристроями - через HTTPS. 
Веб-інтерфейс системи розгортається на клієнтських пристроях, а сервери системи розгортаються на фізичних серверах. Цей розподіл забезпечує високу доступність системи, оскільки клієнтські пристрої можуть бути розташовані в будь-якому місці. 
Система використовує протокол безпеки HTTPS для захисту даних, що передаються між клієнтом і сервером. Цей протокол допомагає захистити дані від несанкціонованого доступу. 
Користувачі використовують веб-браузер на своєму комп'ютері або на своєму мобільному пристрої, щоб переглядати веб-сторінку. 
Розглянемо реалізацію авторизації в системі. Процес аутентифікації базується на використанні JSON Web Token - компактного формату передачі даних між сторонами. При успішній верифікації користувача генерується JWT токен, що містить зашифровані дані про користувача, такі як ідентифікатор, роль, період дії токена. Строк дії токена в цій системі становить 24 години. Після закінчення цього періоду необхідно заново пройти авторизацію для отримання нового токена. JWT токен додається до HTTP заголовків при кожному запиті до захищених ресурсів. На стороні сервера відбувається перевірка дійсності і актуальності даного токена перед наданням доступу до запитуваного ресурсу. Такий підхід дозволяє реалізувати аутентифікацію стану користувача. Безпека даних забезпечується шляхом хешування паролів . 
Інтернаціоналізація відбувається так: дані на сервері зберігаються за часом UTC, а клієнти можуть вказувати зміщення часу відносно UTC. Це дозволяє використовувати програму в будь-якому часовому поясі. Програма підтримує кодування UTF-8 та ASCII. Це дозволяє зберігати та передавати інформацію в базі даних різними мовами. 
Програмним шляхом можна виконувати адміністрування базою даних. Для цього потрібно звертатися до певних кінцевих точок серверної частини. 
Програмний код поділений на різні компоненти за допомогою просторів імен. Це покращує читабельність та гнучкість коду. Використовуються декілька зовнішніх бібліотек. Це дозволяє використовувати в програмі готові функції та можливості. 
4 СПЕЦИФІКАЦІЯ REST


Застосунок взаємодіє з серверною частиною за допомогою REST API. REST API - це стиль архітектури веб-служб, який використовує HTTP для взаємодії з ресурсами. Специфікація усіх кінцевих точок REST API наведена у таблиці 1. Ця таблиця містить інформацію про те, як використовувати кожну кінцеву точку для доступу до ресурсу.

Таблиця 1 – Специфікація REST
HTTP метод 	Кінцева точка 	Опис 
POST /api/user/registration	Реєстрація нового користувача
POST /api/user/login	Авторизація користувача
GET	/api/user/auth	Перевірка аутентифікації користувача
PUT	/api/user/update/{id} 	Оновлення даних користувача за вказаним ідентифікатором
DEL	api/user/delete/{id}	Видалення користувача за вказаним ідентифікатором
GET	/api/user/{id}	Отримання інформації про користувача за вказаним ідентифікатором
POST /api/movie	Створення нового фільму.
GET	/api/movie	Отримання списку всіх фільмів.
GET	api/movie/{id}	Отримання інформації про фільм за вказаним ідентифікатором.
PUT	/api/movie/{id}	Оновлення даних фільму за вказаним ідентифікатором.
DEL	/api/movie/{id}	Видалення фільму за вказаним ідентифікатором.
POST /api/food	Створення нової позиції меню
GET	/api/food	Отримання списку всіх позицій меню
PUT	/api/food/{id}	Оновлення даних про позицію меню за вказаним ідентифікатором
DEL	/api/food/{id}	Видалення позиції меню за вказаним ідентифікатором
POST /api/halls	Створення нового залу
GET	/api/halls	Отримання списку всіх залів
GET	/api/halls/{id}	Отримання інформації про зал за вказаним ідентифікатором
PUT	/api/halls/{id}	Оновлення даних залу за вказаним ідентифікатором
DEL	/api/halls/{id}	Видалення залу за вказаним ідентифікатором
POST 	/api/schedule	Створення нового розкладу показів
GET	/api/schedule/{id}	Отримання інформації про розклад за вказаним ідентифікатором
GET	/api/schedule	Отримання списку всіх розкладів показів
PUT	/api/schedule/{id}	Оновлення розкладу показів за вказаним ідентифікатором
DEL	/api/schedule/{id}	Видалення розкладу показів за вказаним ідентифікатором
POST 	/api/tickets	Створення нового квитка
GET	/api/tickets/{id}	Отримання інформації про квиток за вказаним ідентифікатором
GET	/api/tickets	Отримання списку всіх квитків
PUT	/api/tickets/{id}	Оновлення даних квитка за вказаним ідентифікатором
DEL	/api/tickets/{id}	Видалення квитка за вказаним ідентифікатором
POST 	/api/seats	Бронювання нового місця в залі
GET	/api/seats/{id}	Отримання інформації про місце в залі за вказаним ідентифікатором
GET	/api/seats	Отримання списку всіх місць в залі
PUT	/api/seats/{id}	Оновлення даних про місце в залі за вказаним ідентифікатором
DEL	/api/seats/{id}	Видалення місця в залі за вказаним ідентифікатором
GET	/api/baskets/{id}	Отримання інформації про корзину користувача за вказаним ідентифікатором
GET	/api/basketsTickets/{id}	Отримання інформації про квитки в корзині користувача за вказаним ідентифікатором
POST 	/api/employee	Створення нового працівника
GET	/api/employee	Отримання списку всіх працівників
GET	/api/employee/{id}	Отримання інформації про працівника за вказаним ідентифікатором
PUT	/api/employee/{id}	Оновлення даних працівника за вказаним ідентифікатором
DEL	/api/employee/{id}	Видалення працівника за вказаним ідентифікатором
GET	/api/reviews	Отримання списку всіх відгуків про фільми
GET	/api/recomendation	Отримання списку індивідуальних рекомендацій для користувачів

ВИСНОВКИ

У ході лабораторної роботи було розроблено серверну частину програмної системи для управління кінотеатрами. 
Зокрема, розроблено: UML діаграму прецедентів, яка відображає функціонал системи та категорії користувачів. ER-модель даних, що складається з 11 сутностей для зберігання даних в системі. UML діаграму розгортання, яка демонструє архітектурні рішення та технології, що використовуються в системі. Специфікацію REST API з переліком усіх наявних кінцевих точок та HTTP методів для доступу до ресурсів системи. 
Розробляючи продукт, було дотримано ключових практик для підтримки чистоти коду. 

5 ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

Посилання на архів з кодом: https://github.com/NureChernovaAnastasiia/apz-pzpi-21-6-chernova-anastasiia/tree/main/Task2/server
Посилання на відео: https://www.youtube.com/watch?v=rTIFo9Ua8rk


